[project]
name = "QA_bot_hackathon"
version = "2.1.2"
description = "QA chat-bot for hackathon"
authors = [
    { name = "Набиев Рашидхон", email = "nabievrasheed@yandex.ru"},
    { name = "Никитин Борис", email = "" },
]
readme = "README.md"
requires-python = "==3.12.*"
dependencies = [
    "numpy==2.*",
    "pydantic==2.11.10",
    "sentence-transformers>=5.0.0",
    "transformers>=4.53.1",
    "torch==2.7.0",
    "torchaudio>=2.7.0",
    "torchvision>=0.22.0",
    "nltk>=3.8.0",
    "aiohttp>=3.9.0",
    "faiss-cpu>=1.8.0",
    "FlagEmbedding>=1.2.0",
    "fastapi>=0.115.0",
    "uvicorn>=0.30.0",
    "langchain==0.3.27",
    "langchain-core>=0.3,<0.4",
    "langchain-community==0.3.27",
    "langchain-huggingface>=0.1.0",
    "langchain-text-splitters>=0.3.0",
    "rank-bm25",
    "docx2txt",
    "dotenv",
    "openpyxl",
    "FlagEmbedding==1.2.10",
]

[dependency-groups]
dev = [
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "ruff>=0.11.13",
    "wemake-python-styleguide>=1.1.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.24.0",
    "httpx>=0.28.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 79
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",
    "W",
    "F",   # pycodestyle + pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
    "RUF", # ruff-specific
    "S",   # bandit (security)
]

ignore = [
    "W191",    # indentation contains tabs
    "E501",    # line too long (handled by formatter)
    "S101",    # assert usage (ok in tests)
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic values
    "S311",    # pseudorandom generators (ok for demo data)
    "UP032",   # use f-string
    "S104",    # hardcoded bind
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ARG001", "PLR2004"]
"*/__init__.py" = ["F401"]
"docs/source/conf.py" = ["ALL"]
"src/model.py" = [
    "B008",
    "RUF006",
    "ARG001",
    "S104",
] # CLI args, background tasks
"src/schemas.py" = ["ARG002"] # Pydantic serializable_dict kwargs

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pylint]
max-args = 8
max-statements = 40
[tool.ruff.format]
quote-style = "single"
indent-style = "tab"
docstring-code-format = true

[tool.uv.sources]
torch = { index = "pytorch-cu128" }
torchaudio = { index = "pytorch-cu128" }
torchvision = { index = "pytorch-cu128" }

[[tool.uv.index]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
explicit = true